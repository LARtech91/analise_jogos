<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sistema Inteligente de An√°lise da Mega-Sena</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
            line-height: 1.6;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            padding: 30px;
            text-align: center;
            margin-bottom: 30px;
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1);
        }

        .header h1 {
            color: #2c3e50;
            font-size: 2.5em;
            margin-bottom: 10px;
            font-weight: 700;
        }

        .header p {
            color: #7f8c8d;
            font-size: 1.1em;
        }

        .warning {
            background: linear-gradient(45deg, #ff9a9e, #fecfef);
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 30px;
            text-align: center;
            border: 2px solid rgba(255, 255, 255, 0.3);
        }

        .warning h3 {
            color: #d63031;
            margin-bottom: 10px;
        }

        .warning p {
            color: #2d3436;
            font-weight: 500;
        }

        .controls {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            padding: 25px;
            margin-bottom: 30px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
        }

        .file-input {
            margin-bottom: 20px;
        }

        .file-input input[type="file"] {
            width: 100%;
            padding: 15px;
            border: 3px dashed #ddd;
            border-radius: 10px;
            background: #f8f9fa;
            cursor: pointer;
            font-size: 16px;
            transition: all 0.3s ease;
        }

        .file-input input[type="file"]:hover {
            border-color: #667eea;
            background: #e8f2ff;
        }

        .btn {
            padding: 15px 30px;
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            border: none;
            border-radius: 25px;
            cursor: pointer;
            font-size: 16px;
            font-weight: 600;
            transition: all 0.3s ease;
            margin: 5px;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
        }

        .btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }

        .results-section {
            display: none;
            margin-top: 30px;
        }

        .card {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            padding: 25px;
            margin-bottom: 25px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
            backdrop-filter: blur(10px);
        }

        .card h3 {
            color: #2c3e50;
            margin-bottom: 20px;
            font-size: 1.5em;
            border-bottom: 3px solid #667eea;
            padding-bottom: 10px;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .stat-card {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            padding: 20px;
            border-radius: 15px;
            text-align: center;
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);
        }

        .stat-card h4 {
            font-size: 2em;
            margin-bottom: 5px;
        }

        .numbers-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 15px;
        }

        .numbers-table th,
        .numbers-table td {
            padding: 12px;
            text-align: center;
            border-bottom: 1px solid #ddd;
        }

        .numbers-table th {
            background: #f8f9fa;
            font-weight: 600;
            color: #2c3e50;
        }

        .numbers-table tr:hover {
            background: #f1f3f4;
        }

        .game-suggestion {
            background: linear-gradient(45deg, #56ab2f, #a8e6cf);
            color: white;
            padding: 20px;
            border-radius: 15px;
            margin: 15px 0;
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);
        }

        .game-numbers {
            font-size: 1.5em;
            font-weight: bold;
            margin-bottom: 10px;
            letter-spacing: 2px;
        }

        .game-details {
            font-size: 0.95em;
            opacity: 0.9;
        }

        .strategy-section {
            margin-bottom: 30px;
        }

        .strategy-header {
            display: flex;
            align-items: center;
            margin-bottom: 20px;
        }

        .strategy-icon {
            font-size: 2em;
            margin-right: 15px;
        }

        .loading {
            text-align: center;
            padding: 50px;
            color: #667eea;
            font-size: 1.2em;
        }

        .number-badge {
            display: inline-block;
            background: #667eea;
            color: white;
            padding: 5px 10px;
            border-radius: 20px;
            margin: 2px;
            font-weight: 600;
            min-width: 35px;
        }

        .score-high { background: #27ae60; }
        .score-medium { background: #f39c12; }
        .score-low { background: #e74c3c; }

        @media (max-width: 768px) {
            .container {
                padding: 10px;
            }
            
            .header h1 {
                font-size: 2em;
            }
            
            .stats-grid {
                grid-template-columns: 1fr;
            }
            
            .game-numbers {
                font-size: 1.2em;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üé± Sistema Inteligente de An√°lise da Mega-Sena</h1>
            <p>An√°lise estat√≠stica avan√ßada baseada no hist√≥rico completo de resultados</p>
        </div>

        <div class="warning">
            <h3>‚ö†Ô∏è AVISO IMPORTANTE</h3>
            <p><strong>A Mega-Sena √© um jogo de sorte.</strong> Este sistema fornece an√°lises estat√≠sticas baseadas em dados hist√≥ricos, mas n√£o garante resultados futuros. Jogue com responsabilidade!</p>
        </div>

        <div class="controls">
            <div class="file-input">
                <input type="file" id="csvFile" accept=".csv" />
                <label for="csvFile">üìÅ Carregar arquivo CSV com resultados da Mega-Sena</label>
            </div>
            <button class="btn" id="analyzeBtn" onclick="loadAndAnalyze()" disabled>
                üîç Analisar Dados e Gerar Sugest√µes
            </button>
            <button class="btn" id="generateBtn" onclick="generateNewGames()" disabled>
                üé≤ Gerar Novos Jogos
            </button>
        </div>

        <div id="loading" class="loading" style="display: none;">
            <p>üîÑ Analisando dados... Aguarde...</p>
        </div>

        <div id="results" class="results-section">
            <!-- Estat√≠sticas gerais -->
            <div id="generalStats" class="card">
                <h3>üìä Estat√≠sticas Gerais</h3>
                <div id="statsContent" class="stats-grid"></div>
            </div>

            <!-- Top n√∫meros -->
            <div id="topNumbers" class="card">
                <h3>üèÜ Top 15 N√∫meros Mais Promissores</h3>
                <div id="topNumbersContent"></div>
            </div>

            <!-- Sugest√µes de jogos -->
            <div id="suggestions" class="card">
                <h3>üéØ Sugest√µes Inteligentes para Pr√≥ximo Sorteio</h3>
                <div id="suggestionsContent"></div>
            </div>

            <!-- An√°lise detalhada -->
            <div id="detailedAnalysis" class="card">
                <h3>üìà An√°lise Detalhada dos N√∫meros (1-60)</h3>
                <div id="detailedContent"></div>
            </div>
        </div>
    </div>

    <script>
        let analyzer = null;
        let relatorio = null;
        let sorteios = null;

        // Habilitar bot√£o quando arquivo for selecionado
        document.getElementById('csvFile').addEventListener('change', function() {
            document.getElementById('analyzeBtn').disabled = !this.files.length;
        });

        class MegaSenaAnalyzer {
            constructor(sorteiosData) {
                this.sorteios = sorteiosData;
                this.totalSorteios = sorteiosData.length;
                this.calcularEstatisticas();
            }

            calcularEstatisticas() {
                this.frequencias = {};
                this.atrasos = {};
                this.ciclosMedios = {};

                // Inicializar frequ√™ncias
                for (let i = 1; i <= 60; i++) {
                    this.frequencias[i] = 0;
                }

                // Contar frequ√™ncias
                this.sorteios.forEach(sorteio => {
                    sorteio.numeros.forEach(num => {
                        this.frequencias[num]++;
                    });
                });

                this.frequenciaMedia = this.totalSorteios * 6 / 60;

                // Calcular atrasos
                for (let numero = 1; numero <= 60; numero++) {
                    this.atrasos[numero] = 0;
                    for (let i = this.sorteios.length - 1; i >= 0; i--) {
                        if (this.sorteios[i].numeros.includes(numero)) {
                            this.atrasos[numero] = this.sorteios.length - 1 - i;
                            break;
                        }
                    }
                    if (this.atrasos[numero] === 0 && !this.sorteios[this.sorteios.length - 1].numeros.includes(numero)) {
                        this.atrasos[numero] = this.sorteios.length;
                    }
                }

                // Calcular ciclos m√©dios
                for (let numero = 1; numero <= 60; numero++) {
                    const aparicoes = [];
                    this.sorteios.forEach((sorteio, index) => {
                        if (sorteio.numeros.includes(numero)) {
                            aparicoes.push(index);
                        }
                    });

                    if (aparicoes.length > 1) {
                        const intervalos = [];
                        for (let i = 1; i < aparicoes.length; i++) {
                            intervalos.push(aparicoes[i] - aparicoes[i-1]);
                        }
                        this.ciclosMedios[numero] = intervalos.reduce((a, b) => a + b, 0) / intervalos.length;
                    } else {
                        this.ciclosMedios[numero] = this.totalSorteios;
                    }
                }
            }

            calcularScore(numero) {
                let score = 0;
                const freq = this.frequencias[numero];
                const atraso = this.atrasos[numero];
                const ciclo = this.ciclosMedios[numero];

                // Peso por frequ√™ncia balanceada
                const desvioFreq = Math.abs(freq - this.frequenciaMedia) / this.frequenciaMedia;
                score += Math.max(0, 5 - desvioFreq * 5);

                // Peso por atraso
                if (atraso > ciclo * 0.8) {
                    score += Math.min(4, (atraso / ciclo) * 3);
                }

                // Desconto por excesso de atraso
                if (atraso > ciclo * 1.8) {
                    score -= 1.5;
                }

                return Math.max(0, Math.min(10, score));
            }

            gerarRelatorio() {
                const stats = [];
                for (let numero = 1; numero <= 60; numero++) {
                    stats.push({
                        numero,
                        frequencia: this.frequencias[numero],
                        percentual: (this.frequencias[numero] / this.totalSorteios * 100).toFixed(2),
                        atraso: this.atrasos[numero],
                        cicloMedio: this.ciclosMedios[numero].toFixed(1),
                        score: this.calcularScore(numero).toFixed(2)
                    });
                }
                return stats.sort((a, b) => parseFloat(b.score) - parseFloat(a.score));
            }
        }

        function parseCSV(text) {
            const lines = text.split('\n').filter(line => line.trim());
            const data = [];
            
            lines.forEach(line => {
                const columns = line.split(';');
                if (columns[0] && !isNaN(columns[0]) && parseInt(columns[0]) > 0) {
                    const numeros = [
                        parseInt(columns[2]),
                        parseInt(columns[3]),
                        parseInt(columns[4]),
                        parseInt(columns[5]),
                        parseInt(columns[6]),
                        parseInt(columns[7])
                    ].filter(n => n >= 1 && n <= 60).sort((a, b) => a - b);
                    
                    if (numeros.length === 6) {
                        data.push({
                            concurso: parseInt(columns[0]),
                            data: columns[1],
                            numeros: numeros
                        });
                    }
                }
            });
            
            return data.sort((a, b) => a.concurso - b.concurso);
        }

        async function loadAndAnalyze() {
            const fileInput = document.getElementById('csvFile');
            const file = fileInput.files[0];
            
            if (!file) {
                alert('Por favor, selecione um arquivo CSV primeiro.');
                return;
            }

            document.getElementById('loading').style.display = 'block';
            document.getElementById('results').style.display = 'none';

            try {
                const text = await file.text();
                sorteios = parseCSV(text);
                
                if (sorteios.length === 0) {
                    throw new Error('Nenhum dado v√°lido encontrado no arquivo.');
                }

                analyzer = new MegaSenaAnalyzer(sorteios);
                relatorio = analyzer.gerarRelatorio();

                displayResults();
                
                document.getElementById('generateBtn').disabled = false;
                
            } catch (error) {
                alert('Erro ao processar arquivo: ' + error.message);
            } finally {
                document.getElementById('loading').style.display = 'none';
            }
        }

        function displayResults() {
            displayGeneralStats();
            displayTopNumbers();
            displaySuggestions();
            displayDetailedAnalysis();
            
            document.getElementById('results').style.display = 'block';
        }

        function displayGeneralStats() {
            const ultimo = sorteios[sorteios.length - 1];
            const primeiro = sorteios[0];
            
            const statsHtml = `
                <div class="stat-card">
                    <h4>${sorteios.length}</h4>
                    <p>Sorteios Analisados</p>
                </div>
                <div class="stat-card">
                    <h4>${ultimo.concurso}</h4>
                    <p>√öltimo Concurso</p>
                </div>
                <div class="stat-card">
                    <h4>${ultimo.data}</h4>
                    <p>Data √öltimo Sorteio</p>
                </div>
                <div class="stat-card">
                    <h4>${primeiro.data}</h4>
                    <p>Primeiro Sorteio</p>
                </div>
            `;
            
            document.getElementById('statsContent').innerHTML = statsHtml;
        }

        function displayTopNumbers() {
            const top15 = relatorio.slice(0, 15);
            
            let tableHtml = `
                <table class="numbers-table">
                    <thead>
                        <tr>
                            <th>Pos</th>
                            <th>N√∫mero</th>
                            <th>Score</th>
                            <th>Frequ√™ncia</th>
                            <th>%</th>
                            <th>Atraso</th>
                            <th>Ciclo M√©dio</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>
            `;
            
            top15.forEach((item, index) => {
                const scoreClass = parseFloat(item.score) >= 8 ? 'score-high' : 
                                 parseFloat(item.score) >= 6 ? 'score-medium' : 'score-low';
                const status = item.atraso > 10 ? 'ATRASADO' : 
                             parseFloat(item.percentual) > 10.5 ? 'QUENTE' : 'EQUILIBRADO';
                
                tableHtml += `
                    <tr>
                        <td>${index + 1}¬∫</td>
                        <td><span class="number-badge ${scoreClass}">${item.numero}</span></td>
                        <td>${item.score}</td>
                        <td>${item.frequencia}</td>
                        <td>${item.percentual}%</td>
                        <td>${item.atraso}</td>
                        <td>${item.cicloMedio}</td>
                        <td><strong>${status}</strong></td>
                    </tr>
                `;
            });
            
            tableHtml += '</tbody></table>';
            document.getElementById('topNumbersContent').innerHTML = tableHtml;
        }

        function displaySuggestions() {
            const jogos = generateGames();
            
            let html = '';
            
            // Agrupar por estrat√©gia
            const estrategias = {
                'CONSERVADORA': { icon: 'üéØ', jogos: jogos.filter(j => j.estrategia === 'CONSERVADORA') },
                'AGRESSIVA': { icon: 'üöÄ', jogos: jogos.filter(j => j.estrategia === 'AGRESSIVA') },
                'H√çBRIDA': { icon: '‚öñÔ∏è', jogos: jogos.filter(j => j.estrategia === 'H√çBRIDA') }
            };

            Object.entries(estrategias).forEach(([nome, data]) => {
                if (data.jogos.length > 0) {
                    html += `
                        <div class="strategy-section">
                            <div class="strategy-header">
                                <span class="strategy-icon">${data.icon}</span>
                                <h4>ESTRAT√âGIA ${nome}</h4>
                            </div>
                    `;
                    
                    data.jogos.forEach((jogo, index) => {
                        html += `
                            <div class="game-suggestion">
                                <div class="game-numbers">
                                    JOGO ${index + 1}: [${jogo.numeros.join(' - ')}]
                                </div>
                                <div class="game-details">
                                    Score: ${jogo.score}/10 | Soma: ${jogo.soma} | Pares: ${jogo.pares} | √çmpares: ${jogo.impares}
                                </div>
                            </div>
                        `;
                    });
                    
                    html += '</div>';
                }
            });
            
            document.getElementById('suggestionsContent').innerHTML = html;
        }

        function displayDetailedAnalysis() {
            let tableHtml = `
                <table class="numbers-table">
                    <thead>
                        <tr>
                            <th>N√∫mero</th>
                            <th>Score</th>
                            <th>Frequ√™ncia</th>
                            <th>Percentual</th>
                            <th>Atraso</th>
                            <th>Ciclo M√©dio</th>
                            <th>Classifica√ß√£o</th>
                        </tr>
                    </thead>
                    <tbody>
            `;
            
            relatorio.forEach((item) => {
                const scoreClass = parseFloat(item.score) >= 8 ? 'score-high' : 
                                 parseFloat(item.score) >= 6 ? 'score-medium' : 'score-low';
                const classificacao = item.atraso > 15 ? 'MUITO ATRASADO' :
                                    item.atraso > 10 ? 'ATRASADO' : 
                                    parseFloat(item.percentual) > 10.5 ? 'QUENTE' : 'NORMAL';
                
                tableHtml += `
                    <tr>
                        <td><span class="number-badge ${scoreClass}">${item.numero}</span></td>
                        <td><strong>${item.score}</strong></td>
                        <td>${item.frequencia
